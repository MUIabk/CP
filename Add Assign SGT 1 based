template <typename T> 
struct SegTree {
    int n;
    vector<T> tree, lazy; 
    vector<bool> isSet; 
    SegTree(int x) {
        n = x ;
        tree.resize(4*n+5) ;
        lazy.resize(4*n+5) ;
        isSet.resize(4*n+5) ; 
    }
    inline T merge(T a, T b) {
        return a + b ; 
    }
    void _build(int v, int s, int e, vector<T> &a) {
        if(s == e) {tree[v] = a[s];return;}
        _build(v<<1, s, s+e>>1, a) ;
        _build(v<<1|1, (s+e>>1)+1, e, a) ;
        tree[v] = merge(tree[v<<1], tree[v<<1|1]);
    }
    inline void build(vector<T> &a) {_build(1,1,n,a);}
    inline void push(int v) {
        if(isSet[v]) {
            tree[v<<1] = tree[v<<1|1] = tree[v] ; 
            isSet[v<<1] = isSet[v<<1|1] = true ; 
            isSet[v] = false; lazy[v] = 0 ; 
        }
        else {
            tree[v<<1] += lazy[v], lazy[v<<1] += lazy[v] ; 
            tree[v<<1|1] += lazy[v], lazy[v<<1|1] += lazy[v] ;
            lazy[v] = 0 ; 
        }
    }
    void _updateRange(int v, int s, int e,int l, int r, T w,bool t) {
        if(l > r) return ; 
        if(s == l && e == r) {
            if(t == 0) tree[v] += w, lazy[v] += w; 
            else tree[v] = w, isSet[v] = true ;
        }
        else {
            push(v) ; 
            int m = s+e >> 1  ;
            _updateRange(v<<1, s, m, l, min(r, m), w, t) ; 
            _updateRange(v<<1|1, m+1, e, max(l, m+1), r, w, t); 
            tree[v] = merge(tree[v<<1], tree[v<<1|1]) ; 
        }
    }
    inline void updateRange(int l,int r, T w, string str = "add") {
        bool t = (str == "add" ? 0 : 1);
        if(l > r) return;
        _updateRange(1,1,n,l,r,w,t) ;
    }
    T _query(int v, int s, int e,int l, int r) {
        if(l > r) return 0; 
        if(l <= s && e <= r) return tree[v] ; 
        push(v) ; 
        int m = s+e >> 1;
        return merge(_query(v<<1,s,m,l,min(r,m)),_query(v<<1|1,m+1,e,max(l,m+1),r)) ; 
    }
    inline T query(int l, int r) {
        if(r < 1) return 0;
        if(l > r) return 0;
        return _query(1,1,n,l,r);
    }
};
