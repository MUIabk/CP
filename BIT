template<class type>
class BIT
{
	public:
	int N;
	vector<type> bit;

	BIT(int n)
	{
		//ok
		N = n;
		bit.assign(n+1, type());
	}

	void add(int idx, int val)
	{
		idx++;
		while(idx <= N)
		{
			bit[idx].mn += val;
			idx += idx & -idx;
		}
	}
	
	void range_add(int l, int r, int val) {		//just like difference array
	    add(l, val);
	    add(r + 1, -val);
	}
	
	type pref(int idx)
	{
		idx++;
		type ans=type();
		while(idx > 0)
		{
			ans.mn += bit[idx].mn;
			idx -= idx & -idx;
		}
		return ans;
	}

	int rsum(int l, int r)
	{
		return pref(r).mn - pref(l - 1).mn;
	}

	//returns first index such that pref[idx] >= val

	int search(int val)
	{
		int curSum = 0, pos = 0;
		for(int i = log2(N) + 1; i >= 0; i--)
		{
			if(pos + (1 << i) < N && curSum + bit[pos + (1 << i)].mn < val)
			{
				curSum += bit[pos + (1 << i)].mn;
				pos += (1 << i);
			}
		}
		return pos;
	}

	void updateMax(int idx, int val)
	{
		idx++;
		while(idx <= N)
		{
			bit[idx].mn = max(bit[idx].mn, val);
			idx += idx & -idx;
		}
	}

	int prefMax(int idx)
	{
		idx++;
		int ans = -2e9;
		while(idx > 0)
		{
			ans = max(ans, bit[idx].mn);
			idx -= idx & -idx;
		}
		return ans;
	}
};
class type{
	public:
	int mn;
	type(){mn=0;}
	type(int x){
		mn=x;
	}
};
