
class DSU {
    public:
        vl rank, parent, size, edges;
        DSU(int n) {
            rank.resize(n + 1, 0);
            parent.resize(n + 1);
            size.resize(n + 1);
            edges.resize(n + 1, 0);
            for (int i = 0; i <= n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        int findUPar(int node) {
            if (node == parent[node])
                return node;
            return parent[node] = findUPar(parent[node]);
        }
        void unionByRank(int u, int v) {
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            if (ulp_u == ulp_v) {edges[ulp_u]++;return;}
            if (rank[ulp_u] < rank[ulp_v]) {
                parent[ulp_u] = ulp_v;
                edges[ulp_v] += edges[ulp_u]+1;
            }
            else if (rank[ulp_v] < rank[ulp_u]) {
                parent[ulp_v] = ulp_u;
                edges[ulp_u] += edges[ulp_v]+1;
            }
            else {
                parent[ulp_v] = ulp_u;
                edges[ulp_u] += edges[ulp_v]+1;
                rank[ulp_u]++;
            }
        }
        void unionBySize(int u, int v) {
            int ulp_u = findUPar(u);
            int ulp_v = findUPar(v);
            if (ulp_u == ulp_v) {edges[ulp_u]++;return;}
            if (size[ulp_u] < size[ulp_v]) {
                parent[ulp_u] = ulp_v;
                size[ulp_v] += size[ulp_u];
                edges[ulp_v]+=edges[ulp_u]+1;
            }
            else {
                parent[ulp_v] = ulp_u;
                size[ulp_u] += size[ulp_v];
                edges[ulp_u]+=edges[ulp_v]+1;
            }
        }
};
