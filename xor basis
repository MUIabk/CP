const int bit=31;
template<class T>
struct xbasis{
  T base[bit];
  int n=0;
  int b;
  xbasis(int bb=bit){
    b=bb;
    FOR(i,0,bit)base[i]=0;
  }
  xbasis(vector<T>&a,int bb=bit){
    b=bb;
    FOR(i,0,bit)base[i]=0;
    for(auto &x:a)insert(x);
  }
  T mn(T x){
    if(n==b)return 0;
    for(int i=0;i<n;i++)x=min(x,x^base[i]);
    return x;
  }
  T mx(T x=0){
    if(n==b)return T(1)<<b-1;
    for(int i=0;i<n;i++)x=max(x,x^base[i]);
    return x;
  }
  bool find(int x){
    return mn(x)==0;
  }
  int size(){return n;}
  void insert(T x){
    x=mn(x);
    if(!x)return;
    base[n++]=x;
    int k=n-1;
    while(k>0 and base[k]>base[k-1]){
      swap(base[k],base[k-1]);
      k--;
    }
  }
  void merge(const xbasis<T>&xx){
    for(int i=0;i<xx.n and n<b;i++){
      insert(xx.base[i]);
    }
  }
  void merge(const xbasis<T>&x,const xbasis<T>&xx){
    if(x.n>xx.n){
      *this=x;merge(xx);
    }else {
      *this=xx;merge(x);
    }
  }
  void clear(){
    for(int i=0;i<n;i++)base[i]=0;
    n=0;
  }
};

//very good example for binary lifting and xor basis : https://codeforces.com/contest/1902/submission/237669398
//note vector takes much more space than array so use array whenever possible ... or if you get MLE
//easier one hhttps://codeforces.com/contest/959/submission/237685571
