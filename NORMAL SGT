template<typename T>
class Seg{
    public:
    int n;
    vector<T> seg;
    void _update(int i,int l,int r,int idx,T val){
        if(l == r) {seg[i] = val; return;}
        int mid = l+r>>1;
        if(idx<=mid) _update(2*i+1,l,mid,idx,val);
        else _update(2*i+2,mid+1,r,idx,val);
        seg[i].merge(seg[2*i+1],seg[2*i+2]);
    }
    T _query(int i,int l,int r,int ll,int rr){
        if(l>r) return T();
        if(r < ll || l > rr) return T();
        if(ll<=l && rr>=r) return seg[i];
        int mid = l+r>>1;
        T ans;
        ans.merge(_query(2*i+1,l,mid,ll,rr),_query(2*i+2,mid+1,r,ll,rr));    
        return ans;
    }
    Seg(int _n){
        n = _n;
        seg.resize(4*n,T());
    }
    void update(int idx,T val){ _update(0,0,n,idx,val); }
    T query(int l,int r){ return _query(0,0,n,l,r); }
};
struct Node{
    int sm;
    Node(){
        sm=0;
    }
    Node(int x){
        sm=x;
    };
    void merge(Node l,Node r){
        sm=l.sm+r.sm;
    }; 
};
