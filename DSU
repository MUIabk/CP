struct DSU{
  ll n;
  vl p,wt;
  DSU(ll nn){
    n=nn;
    p.assign(n+1,-1);
    wt.resize(n+1,0);
  }
  ll root(ll x){
    if(p[x]<0)return x;
    ll par=root(p[x]);
    wt[x]+=wt[p[x]];
    return p[x]=par;
  }
  ll wunite(ll u,ll v,ll w){ //u->v==w
    if(check(u,v) and wdiff(u,v)!=w)return -1;
    ll p1=root(u),p2=root(v);
    w-=weight(v)-weight(u);
    if(p1!=p2){
      if(size(p1)<size(p2))swap(p1,p2),w=-w;
      p[p1]+=p[p2];
      p[p2]=p1;
      wt[p2]=w;
    }return p1!=p2;
  }
  bool unite(ll u,ll v){
    if(check(u,v))return false;
    ll p1=root(u),p2=root(v);
    assert(p1!=p2);
    if(size(p1)<size(p2))swap(p1,p2);
    p[p1]+=p[p2];
    p[p2]=p1;
    return true;
  }
  ll weight(ll x){
    root(x);
    return wt[x];
  }
  ll size(ll x){
    return -p[root(x)];
  }
  bool check(ll u,ll v){
    return root(u)==root(v);
  }
  ll wdiff(ll u,ll v){
    return weight(v)-weight(u);
  }
  void debug(){
    for(ll i=0;i<n;i++)dbg(i,p[i],wt[i]);
  }
};
